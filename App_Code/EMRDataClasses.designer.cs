#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EMR")]
public partial class EMRDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDoctor(Doctor instance);
  partial void UpdateDoctor(Doctor instance);
  partial void DeleteDoctor(Doctor instance);
  partial void InsertMedicalRecord(MedicalRecord instance);
  partial void UpdateMedicalRecord(MedicalRecord instance);
  partial void DeleteMedicalRecord(MedicalRecord instance);
  partial void InsertNurse(Nurse instance);
  partial void UpdateNurse(Nurse instance);
  partial void DeleteNurse(Nurse instance);
  partial void InsertNursePreview(NursePreview instance);
  partial void UpdateNursePreview(NursePreview instance);
  partial void DeleteNursePreview(NursePreview instance);
  partial void InsertPatient(Patient instance);
  partial void UpdatePatient(Patient instance);
  partial void DeletePatient(Patient instance);
  partial void InsertPharmacist(Pharmacist instance);
  partial void UpdatePharmacist(Pharmacist instance);
  partial void DeletePharmacist(Pharmacist instance);
  partial void InsertPrescription(Prescription instance);
  partial void UpdatePrescription(Prescription instance);
  partial void DeletePrescription(Prescription instance);
  partial void InsertSickness(Sickness instance);
  partial void UpdateSickness(Sickness instance);
  partial void DeleteSickness(Sickness instance);
  partial void InsertSicknessMedicalRecord(SicknessMedicalRecord instance);
  partial void UpdateSicknessMedicalRecord(SicknessMedicalRecord instance);
  partial void DeleteSicknessMedicalRecord(SicknessMedicalRecord instance);
  partial void Insertaspnet_User(aspnet_User instance);
  partial void Updateaspnet_User(aspnet_User instance);
  partial void Deleteaspnet_User(aspnet_User instance);
  partial void InsertPersonalInfo(PersonalInfo instance);
  partial void UpdatePersonalInfo(PersonalInfo instance);
  partial void DeletePersonalInfo(PersonalInfo instance);
  #endregion
	
	public EMRDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EMRConnectionString2"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public EMRDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EMRDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EMRDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EMRDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Doctor> Doctors
	{
		get
		{
			return this.GetTable<Doctor>();
		}
	}
	
	public System.Data.Linq.Table<MedicalRecord> MedicalRecords
	{
		get
		{
			return this.GetTable<MedicalRecord>();
		}
	}
	
	public System.Data.Linq.Table<Nurse> Nurses
	{
		get
		{
			return this.GetTable<Nurse>();
		}
	}
	
	public System.Data.Linq.Table<NursePreview> NursePreviews
	{
		get
		{
			return this.GetTable<NursePreview>();
		}
	}
	
	public System.Data.Linq.Table<Patient> Patients
	{
		get
		{
			return this.GetTable<Patient>();
		}
	}
	
	public System.Data.Linq.Table<Pharmacist> Pharmacists
	{
		get
		{
			return this.GetTable<Pharmacist>();
		}
	}
	
	public System.Data.Linq.Table<Prescription> Prescriptions
	{
		get
		{
			return this.GetTable<Prescription>();
		}
	}
	
	public System.Data.Linq.Table<Sickness> Sicknesses
	{
		get
		{
			return this.GetTable<Sickness>();
		}
	}
	
	public System.Data.Linq.Table<SicknessMedicalRecord> SicknessMedicalRecords
	{
		get
		{
			return this.GetTable<SicknessMedicalRecord>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_User> aspnet_Users
	{
		get
		{
			return this.GetTable<aspnet_User>();
		}
	}
	
	public System.Data.Linq.Table<PersonalInfo> PersonalInfos
	{
		get
		{
			return this.GetTable<PersonalInfo>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private byte _Type;
	
	private string _Compertence;
	
	private int _PersonalInfoId;
	
	private EntitySet<MedicalRecord> _MedicalRecords;
	
	private EntityRef<PersonalInfo> _PersonalInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnCompertenceChanging(string value);
    partial void OnCompertenceChanged();
    partial void OnPersonalInfoIdChanging(int value);
    partial void OnPersonalInfoIdChanged();
    #endregion
	
	public Doctor()
	{
		this._MedicalRecords = new EntitySet<MedicalRecord>(new Action<MedicalRecord>(this.attach_MedicalRecords), new Action<MedicalRecord>(this.detach_MedicalRecords));
		this._PersonalInfo = default(EntityRef<PersonalInfo>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
	public byte Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Compertence", DbType="NVarChar(MAX)")]
	public string Compertence
	{
		get
		{
			return this._Compertence;
		}
		set
		{
			if ((this._Compertence != value))
			{
				this.OnCompertenceChanging(value);
				this.SendPropertyChanging();
				this._Compertence = value;
				this.SendPropertyChanged("Compertence");
				this.OnCompertenceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalInfoId", DbType="Int NOT NULL")]
	public int PersonalInfoId
	{
		get
		{
			return this._PersonalInfoId;
		}
		set
		{
			if ((this._PersonalInfoId != value))
			{
				if (this._PersonalInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonalInfoIdChanging(value);
				this.SendPropertyChanging();
				this._PersonalInfoId = value;
				this.SendPropertyChanged("PersonalInfoId");
				this.OnPersonalInfoIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_MedicalRecord", Storage="_MedicalRecords", ThisKey="Id", OtherKey="DoctorId")]
	public EntitySet<MedicalRecord> MedicalRecords
	{
		get
		{
			return this._MedicalRecords;
		}
		set
		{
			this._MedicalRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Doctor", Storage="_PersonalInfo", ThisKey="PersonalInfoId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public PersonalInfo PersonalInfo
	{
		get
		{
			return this._PersonalInfo.Entity;
		}
		set
		{
			PersonalInfo previousValue = this._PersonalInfo.Entity;
			if (((previousValue != value) 
						|| (this._PersonalInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PersonalInfo.Entity = null;
					previousValue.Doctors.Remove(this);
				}
				this._PersonalInfo.Entity = value;
				if ((value != null))
				{
					value.Doctors.Add(this);
					this._PersonalInfoId = value.Id;
				}
				else
				{
					this._PersonalInfoId = default(int);
				}
				this.SendPropertyChanged("PersonalInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MedicalRecords(MedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = this;
	}
	
	private void detach_MedicalRecords(MedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.Doctor = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalRecord")]
public partial class MedicalRecord : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _DoctorId;
	
	private int _PatientId;
	
	private System.DateTime _DateOfPreview;
	
	private string _Description;
	
	private EntitySet<NursePreview> _NursePreviews;
	
	private EntitySet<Prescription> _Prescriptions;
	
	private EntitySet<SicknessMedicalRecord> _SicknessMedicalRecords;
	
	private EntityRef<Doctor> _Doctor;
	
	private EntityRef<Patient> _Patient;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnDateOfPreviewChanging(System.DateTime value);
    partial void OnDateOfPreviewChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public MedicalRecord()
	{
		this._NursePreviews = new EntitySet<NursePreview>(new Action<NursePreview>(this.attach_NursePreviews), new Action<NursePreview>(this.detach_NursePreviews));
		this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
		this._SicknessMedicalRecords = new EntitySet<SicknessMedicalRecord>(new Action<SicknessMedicalRecord>(this.attach_SicknessMedicalRecords), new Action<SicknessMedicalRecord>(this.detach_SicknessMedicalRecords));
		this._Doctor = default(EntityRef<Doctor>);
		this._Patient = default(EntityRef<Patient>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int NOT NULL")]
	public int DoctorId
	{
		get
		{
			return this._DoctorId;
		}
		set
		{
			if ((this._DoctorId != value))
			{
				if (this._Doctor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDoctorIdChanging(value);
				this.SendPropertyChanging();
				this._DoctorId = value;
				this.SendPropertyChanged("DoctorId");
				this.OnDoctorIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
	public int PatientId
	{
		get
		{
			return this._PatientId;
		}
		set
		{
			if ((this._PatientId != value))
			{
				if (this._Patient.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPatientIdChanging(value);
				this.SendPropertyChanging();
				this._PatientId = value;
				this.SendPropertyChanged("PatientId");
				this.OnPatientIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPreview", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfPreview
	{
		get
		{
			return this._DateOfPreview;
		}
		set
		{
			if ((this._DateOfPreview != value))
			{
				this.OnDateOfPreviewChanging(value);
				this.SendPropertyChanging();
				this._DateOfPreview = value;
				this.SendPropertyChanged("DateOfPreview");
				this.OnDateOfPreviewChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalRecord_NursePreview", Storage="_NursePreviews", ThisKey="Id", OtherKey="MedicalRecoedId")]
	public EntitySet<NursePreview> NursePreviews
	{
		get
		{
			return this._NursePreviews;
		}
		set
		{
			this._NursePreviews.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalRecord_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="MedicalRecordId")]
	public EntitySet<Prescription> Prescriptions
	{
		get
		{
			return this._Prescriptions;
		}
		set
		{
			this._Prescriptions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalRecord_SicknessMedicalRecord", Storage="_SicknessMedicalRecords", ThisKey="Id", OtherKey="MedicalRecordId")]
	public EntitySet<SicknessMedicalRecord> SicknessMedicalRecords
	{
		get
		{
			return this._SicknessMedicalRecords;
		}
		set
		{
			this._SicknessMedicalRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_MedicalRecord", Storage="_Doctor", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Doctor Doctor
	{
		get
		{
			return this._Doctor.Entity;
		}
		set
		{
			Doctor previousValue = this._Doctor.Entity;
			if (((previousValue != value) 
						|| (this._Doctor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Doctor.Entity = null;
					previousValue.MedicalRecords.Remove(this);
				}
				this._Doctor.Entity = value;
				if ((value != null))
				{
					value.MedicalRecords.Add(this);
					this._DoctorId = value.Id;
				}
				else
				{
					this._DoctorId = default(int);
				}
				this.SendPropertyChanged("Doctor");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalRecord", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true)]
	public Patient Patient
	{
		get
		{
			return this._Patient.Entity;
		}
		set
		{
			Patient previousValue = this._Patient.Entity;
			if (((previousValue != value) 
						|| (this._Patient.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patient.Entity = null;
					previousValue.MedicalRecords.Remove(this);
				}
				this._Patient.Entity = value;
				if ((value != null))
				{
					value.MedicalRecords.Add(this);
					this._PatientId = value.Id;
				}
				else
				{
					this._PatientId = default(int);
				}
				this.SendPropertyChanged("Patient");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_NursePreviews(NursePreview entity)
	{
		this.SendPropertyChanging();
		entity.MedicalRecord = this;
	}
	
	private void detach_NursePreviews(NursePreview entity)
	{
		this.SendPropertyChanging();
		entity.MedicalRecord = null;
	}
	
	private void attach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.MedicalRecord = this;
	}
	
	private void detach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.MedicalRecord = null;
	}
	
	private void attach_SicknessMedicalRecords(SicknessMedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.MedicalRecord = this;
	}
	
	private void detach_SicknessMedicalRecords(SicknessMedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.MedicalRecord = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nurse")]
public partial class Nurse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _PersonalInfoId;
	
	private EntitySet<NursePreview> _NursePreviews;
	
	private EntityRef<PersonalInfo> _PersonalInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalInfoIdChanging(int value);
    partial void OnPersonalInfoIdChanged();
    #endregion
	
	public Nurse()
	{
		this._NursePreviews = new EntitySet<NursePreview>(new Action<NursePreview>(this.attach_NursePreviews), new Action<NursePreview>(this.detach_NursePreviews));
		this._PersonalInfo = default(EntityRef<PersonalInfo>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalInfoId", DbType="Int NOT NULL")]
	public int PersonalInfoId
	{
		get
		{
			return this._PersonalInfoId;
		}
		set
		{
			if ((this._PersonalInfoId != value))
			{
				if (this._PersonalInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonalInfoIdChanging(value);
				this.SendPropertyChanging();
				this._PersonalInfoId = value;
				this.SendPropertyChanged("PersonalInfoId");
				this.OnPersonalInfoIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NursePreview", Storage="_NursePreviews", ThisKey="Id", OtherKey="NurseId")]
	public EntitySet<NursePreview> NursePreviews
	{
		get
		{
			return this._NursePreviews;
		}
		set
		{
			this._NursePreviews.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Nurse", Storage="_PersonalInfo", ThisKey="PersonalInfoId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public PersonalInfo PersonalInfo
	{
		get
		{
			return this._PersonalInfo.Entity;
		}
		set
		{
			PersonalInfo previousValue = this._PersonalInfo.Entity;
			if (((previousValue != value) 
						|| (this._PersonalInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PersonalInfo.Entity = null;
					previousValue.Nurses.Remove(this);
				}
				this._PersonalInfo.Entity = value;
				if ((value != null))
				{
					value.Nurses.Add(this);
					this._PersonalInfoId = value.Id;
				}
				else
				{
					this._PersonalInfoId = default(int);
				}
				this.SendPropertyChanged("PersonalInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_NursePreviews(NursePreview entity)
	{
		this.SendPropertyChanging();
		entity.Nurse = this;
	}
	
	private void detach_NursePreviews(NursePreview entity)
	{
		this.SendPropertyChanging();
		entity.Nurse = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NursePreview")]
public partial class NursePreview : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private byte _TypeOfOperation;
	
	private System.DateTime _DateOfOperation;
	
	private System.Nullable<int> _NurseId;
	
	private int _MedicalRecoedId;
	
	private string _Test;
	
	private string _XRayPhotoPath;
	
	private string _Description;
	
	private string _Note;
	
	private EntityRef<MedicalRecord> _MedicalRecord;
	
	private EntityRef<Nurse> _Nurse;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeOfOperationChanging(byte value);
    partial void OnTypeOfOperationChanged();
    partial void OnDateOfOperationChanging(System.DateTime value);
    partial void OnDateOfOperationChanged();
    partial void OnNurseIdChanging(System.Nullable<int> value);
    partial void OnNurseIdChanged();
    partial void OnMedicalRecoedIdChanging(int value);
    partial void OnMedicalRecoedIdChanged();
    partial void OnTestChanging(string value);
    partial void OnTestChanged();
    partial void OnXRayPhotoPathChanging(string value);
    partial void OnXRayPhotoPathChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public NursePreview()
	{
		this._MedicalRecord = default(EntityRef<MedicalRecord>);
		this._Nurse = default(EntityRef<Nurse>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfOperation", DbType="TinyInt NOT NULL")]
	public byte TypeOfOperation
	{
		get
		{
			return this._TypeOfOperation;
		}
		set
		{
			if ((this._TypeOfOperation != value))
			{
				this.OnTypeOfOperationChanging(value);
				this.SendPropertyChanging();
				this._TypeOfOperation = value;
				this.SendPropertyChanged("TypeOfOperation");
				this.OnTypeOfOperationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfOperation", DbType="DateTime NOT NULL")]
	public System.DateTime DateOfOperation
	{
		get
		{
			return this._DateOfOperation;
		}
		set
		{
			if ((this._DateOfOperation != value))
			{
				this.OnDateOfOperationChanging(value);
				this.SendPropertyChanging();
				this._DateOfOperation = value;
				this.SendPropertyChanged("DateOfOperation");
				this.OnDateOfOperationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NurseId", DbType="Int")]
	public System.Nullable<int> NurseId
	{
		get
		{
			return this._NurseId;
		}
		set
		{
			if ((this._NurseId != value))
			{
				if (this._Nurse.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNurseIdChanging(value);
				this.SendPropertyChanging();
				this._NurseId = value;
				this.SendPropertyChanged("NurseId");
				this.OnNurseIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalRecoedId", DbType="Int NOT NULL")]
	public int MedicalRecoedId
	{
		get
		{
			return this._MedicalRecoedId;
		}
		set
		{
			if ((this._MedicalRecoedId != value))
			{
				if (this._MedicalRecord.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMedicalRecoedIdChanging(value);
				this.SendPropertyChanging();
				this._MedicalRecoedId = value;
				this.SendPropertyChanged("MedicalRecoedId");
				this.OnMedicalRecoedIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test", DbType="NVarChar(MAX)")]
	public string Test
	{
		get
		{
			return this._Test;
		}
		set
		{
			if ((this._Test != value))
			{
				this.OnTestChanging(value);
				this.SendPropertyChanging();
				this._Test = value;
				this.SendPropertyChanged("Test");
				this.OnTestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XRayPhotoPath", DbType="NVarChar(250)")]
	public string XRayPhotoPath
	{
		get
		{
			return this._XRayPhotoPath;
		}
		set
		{
			if ((this._XRayPhotoPath != value))
			{
				this.OnXRayPhotoPathChanging(value);
				this.SendPropertyChanging();
				this._XRayPhotoPath = value;
				this.SendPropertyChanged("XRayPhotoPath");
				this.OnXRayPhotoPathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalRecord_NursePreview", Storage="_MedicalRecord", ThisKey="MedicalRecoedId", OtherKey="Id", IsForeignKey=true)]
	public MedicalRecord MedicalRecord
	{
		get
		{
			return this._MedicalRecord.Entity;
		}
		set
		{
			MedicalRecord previousValue = this._MedicalRecord.Entity;
			if (((previousValue != value) 
						|| (this._MedicalRecord.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MedicalRecord.Entity = null;
					previousValue.NursePreviews.Remove(this);
				}
				this._MedicalRecord.Entity = value;
				if ((value != null))
				{
					value.NursePreviews.Add(this);
					this._MedicalRecoedId = value.Id;
				}
				else
				{
					this._MedicalRecoedId = default(int);
				}
				this.SendPropertyChanged("MedicalRecord");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NursePreview", Storage="_Nurse", ThisKey="NurseId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Nurse Nurse
	{
		get
		{
			return this._Nurse.Entity;
		}
		set
		{
			Nurse previousValue = this._Nurse.Entity;
			if (((previousValue != value) 
						|| (this._Nurse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Nurse.Entity = null;
					previousValue.NursePreviews.Remove(this);
				}
				this._Nurse.Entity = value;
				if ((value != null))
				{
					value.NursePreviews.Add(this);
					this._NurseId = value.Id;
				}
				else
				{
					this._NurseId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Nurse");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _PersonalInfoId;
	
	private EntitySet<MedicalRecord> _MedicalRecords;
	
	private EntityRef<PersonalInfo> _PersonalInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalInfoIdChanging(int value);
    partial void OnPersonalInfoIdChanged();
    #endregion
	
	public Patient()
	{
		this._MedicalRecords = new EntitySet<MedicalRecord>(new Action<MedicalRecord>(this.attach_MedicalRecords), new Action<MedicalRecord>(this.detach_MedicalRecords));
		this._PersonalInfo = default(EntityRef<PersonalInfo>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalInfoId", DbType="Int NOT NULL")]
	public int PersonalInfoId
	{
		get
		{
			return this._PersonalInfoId;
		}
		set
		{
			if ((this._PersonalInfoId != value))
			{
				if (this._PersonalInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonalInfoIdChanging(value);
				this.SendPropertyChanging();
				this._PersonalInfoId = value;
				this.SendPropertyChanged("PersonalInfoId");
				this.OnPersonalInfoIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalRecord", Storage="_MedicalRecords", ThisKey="Id", OtherKey="PatientId")]
	public EntitySet<MedicalRecord> MedicalRecords
	{
		get
		{
			return this._MedicalRecords;
		}
		set
		{
			this._MedicalRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Patient", Storage="_PersonalInfo", ThisKey="PersonalInfoId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public PersonalInfo PersonalInfo
	{
		get
		{
			return this._PersonalInfo.Entity;
		}
		set
		{
			PersonalInfo previousValue = this._PersonalInfo.Entity;
			if (((previousValue != value) 
						|| (this._PersonalInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PersonalInfo.Entity = null;
					previousValue.Patients.Remove(this);
				}
				this._PersonalInfo.Entity = value;
				if ((value != null))
				{
					value.Patients.Add(this);
					this._PersonalInfoId = value.Id;
				}
				else
				{
					this._PersonalInfoId = default(int);
				}
				this.SendPropertyChanged("PersonalInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MedicalRecords(MedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.Patient = this;
	}
	
	private void detach_MedicalRecords(MedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.Patient = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pharmacist")]
public partial class Pharmacist : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _PersonalInfoId;
	
	private EntitySet<Prescription> _Prescriptions;
	
	private EntityRef<PersonalInfo> _PersonalInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalInfoIdChanging(int value);
    partial void OnPersonalInfoIdChanged();
    #endregion
	
	public Pharmacist()
	{
		this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
		this._PersonalInfo = default(EntityRef<PersonalInfo>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalInfoId", DbType="Int NOT NULL")]
	public int PersonalInfoId
	{
		get
		{
			return this._PersonalInfoId;
		}
		set
		{
			if ((this._PersonalInfoId != value))
			{
				if (this._PersonalInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonalInfoIdChanging(value);
				this.SendPropertyChanging();
				this._PersonalInfoId = value;
				this.SendPropertyChanged("PersonalInfoId");
				this.OnPersonalInfoIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pharmacist_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="PharmacistId")]
	public EntitySet<Prescription> Prescriptions
	{
		get
		{
			return this._Prescriptions;
		}
		set
		{
			this._Prescriptions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Pharmacist", Storage="_PersonalInfo", ThisKey="PersonalInfoId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public PersonalInfo PersonalInfo
	{
		get
		{
			return this._PersonalInfo.Entity;
		}
		set
		{
			PersonalInfo previousValue = this._PersonalInfo.Entity;
			if (((previousValue != value) 
						|| (this._PersonalInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PersonalInfo.Entity = null;
					previousValue.Pharmacists.Remove(this);
				}
				this._PersonalInfo.Entity = value;
				if ((value != null))
				{
					value.Pharmacists.Add(this);
					this._PersonalInfoId = value.Id;
				}
				else
				{
					this._PersonalInfoId = default(int);
				}
				this.SendPropertyChanged("PersonalInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Pharmacist = this;
	}
	
	private void detach_Prescriptions(Prescription entity)
	{
		this.SendPropertyChanging();
		entity.Pharmacist = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _MedicalRecordId;
	
	private System.Nullable<int> _PharmacistId;
	
	private string _PrescriptionText;
	
	private System.Nullable<System.DateTime> _DateOfPrescription;
	
	private string _description;
	
	private string _Note;
	
	private EntityRef<MedicalRecord> _MedicalRecord;
	
	private EntityRef<Pharmacist> _Pharmacist;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMedicalRecordIdChanging(int value);
    partial void OnMedicalRecordIdChanged();
    partial void OnPharmacistIdChanging(System.Nullable<int> value);
    partial void OnPharmacistIdChanged();
    partial void OnPrescriptionTextChanging(string value);
    partial void OnPrescriptionTextChanged();
    partial void OnDateOfPrescriptionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfPrescriptionChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public Prescription()
	{
		this._MedicalRecord = default(EntityRef<MedicalRecord>);
		this._Pharmacist = default(EntityRef<Pharmacist>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalRecordId", DbType="Int NOT NULL")]
	public int MedicalRecordId
	{
		get
		{
			return this._MedicalRecordId;
		}
		set
		{
			if ((this._MedicalRecordId != value))
			{
				if (this._MedicalRecord.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMedicalRecordIdChanging(value);
				this.SendPropertyChanging();
				this._MedicalRecordId = value;
				this.SendPropertyChanged("MedicalRecordId");
				this.OnMedicalRecordIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PharmacistId", DbType="Int")]
	public System.Nullable<int> PharmacistId
	{
		get
		{
			return this._PharmacistId;
		}
		set
		{
			if ((this._PharmacistId != value))
			{
				if (this._Pharmacist.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPharmacistIdChanging(value);
				this.SendPropertyChanging();
				this._PharmacistId = value;
				this.SendPropertyChanged("PharmacistId");
				this.OnPharmacistIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionText", DbType="NVarChar(250)")]
	public string PrescriptionText
	{
		get
		{
			return this._PrescriptionText;
		}
		set
		{
			if ((this._PrescriptionText != value))
			{
				this.OnPrescriptionTextChanging(value);
				this.SendPropertyChanging();
				this._PrescriptionText = value;
				this.SendPropertyChanged("PrescriptionText");
				this.OnPrescriptionTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPrescription", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfPrescription
	{
		get
		{
			return this._DateOfPrescription;
		}
		set
		{
			if ((this._DateOfPrescription != value))
			{
				this.OnDateOfPrescriptionChanging(value);
				this.SendPropertyChanging();
				this._DateOfPrescription = value;
				this.SendPropertyChanged("DateOfPrescription");
				this.OnDateOfPrescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalRecord_Prescription", Storage="_MedicalRecord", ThisKey="MedicalRecordId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public MedicalRecord MedicalRecord
	{
		get
		{
			return this._MedicalRecord.Entity;
		}
		set
		{
			MedicalRecord previousValue = this._MedicalRecord.Entity;
			if (((previousValue != value) 
						|| (this._MedicalRecord.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MedicalRecord.Entity = null;
					previousValue.Prescriptions.Remove(this);
				}
				this._MedicalRecord.Entity = value;
				if ((value != null))
				{
					value.Prescriptions.Add(this);
					this._MedicalRecordId = value.Id;
				}
				else
				{
					this._MedicalRecordId = default(int);
				}
				this.SendPropertyChanged("MedicalRecord");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pharmacist_Prescription", Storage="_Pharmacist", ThisKey="PharmacistId", OtherKey="Id", IsForeignKey=true)]
	public Pharmacist Pharmacist
	{
		get
		{
			return this._Pharmacist.Entity;
		}
		set
		{
			Pharmacist previousValue = this._Pharmacist.Entity;
			if (((previousValue != value) 
						|| (this._Pharmacist.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Pharmacist.Entity = null;
					previousValue.Prescriptions.Remove(this);
				}
				this._Pharmacist.Entity = value;
				if ((value != null))
				{
					value.Prescriptions.Add(this);
					this._PharmacistId = value.Id;
				}
				else
				{
					this._PharmacistId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Pharmacist");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sickness")]
public partial class Sickness : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Disease;
	
	private string _Type;
	
	private byte _LevelOfRisk;
	
	private string _Description;
	
	private string _TreatmentPlan;
	
	private EntitySet<SicknessMedicalRecord> _SicknessMedicalRecords;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDiseaseChanging(string value);
    partial void OnDiseaseChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLevelOfRiskChanging(byte value);
    partial void OnLevelOfRiskChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTreatmentPlanChanging(string value);
    partial void OnTreatmentPlanChanged();
    #endregion
	
	public Sickness()
	{
		this._SicknessMedicalRecords = new EntitySet<SicknessMedicalRecord>(new Action<SicknessMedicalRecord>(this.attach_SicknessMedicalRecords), new Action<SicknessMedicalRecord>(this.detach_SicknessMedicalRecords));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Disease
	{
		get
		{
			return this._Disease;
		}
		set
		{
			if ((this._Disease != value))
			{
				this.OnDiseaseChanging(value);
				this.SendPropertyChanging();
				this._Disease = value;
				this.SendPropertyChanged("Disease");
				this.OnDiseaseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelOfRisk", DbType="TinyInt NOT NULL")]
	public byte LevelOfRisk
	{
		get
		{
			return this._LevelOfRisk;
		}
		set
		{
			if ((this._LevelOfRisk != value))
			{
				this.OnLevelOfRiskChanging(value);
				this.SendPropertyChanging();
				this._LevelOfRisk = value;
				this.SendPropertyChanged("LevelOfRisk");
				this.OnLevelOfRiskChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreatmentPlan", DbType="NVarChar(MAX)")]
	public string TreatmentPlan
	{
		get
		{
			return this._TreatmentPlan;
		}
		set
		{
			if ((this._TreatmentPlan != value))
			{
				this.OnTreatmentPlanChanging(value);
				this.SendPropertyChanging();
				this._TreatmentPlan = value;
				this.SendPropertyChanged("TreatmentPlan");
				this.OnTreatmentPlanChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sickness_SicknessMedicalRecord", Storage="_SicknessMedicalRecords", ThisKey="Id", OtherKey="SicknessId")]
	public EntitySet<SicknessMedicalRecord> SicknessMedicalRecords
	{
		get
		{
			return this._SicknessMedicalRecords;
		}
		set
		{
			this._SicknessMedicalRecords.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SicknessMedicalRecords(SicknessMedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.Sickness = this;
	}
	
	private void detach_SicknessMedicalRecords(SicknessMedicalRecord entity)
	{
		this.SendPropertyChanging();
		entity.Sickness = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SicknessMedicalRecord")]
public partial class SicknessMedicalRecord : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _SicknessId;
	
	private int _MedicalRecordId;
	
	private string _Note;
	
	private byte _Rate;
	
	private System.Nullable<System.DateTime> _DateOfReview;
	
	private EntityRef<MedicalRecord> _MedicalRecord;
	
	private EntityRef<Sickness> _Sickness;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSicknessIdChanging(int value);
    partial void OnSicknessIdChanged();
    partial void OnMedicalRecordIdChanging(int value);
    partial void OnMedicalRecordIdChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRateChanging(byte value);
    partial void OnRateChanged();
    partial void OnDateOfReviewChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfReviewChanged();
    #endregion
	
	public SicknessMedicalRecord()
	{
		this._MedicalRecord = default(EntityRef<MedicalRecord>);
		this._Sickness = default(EntityRef<Sickness>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SicknessId", DbType="Int NOT NULL")]
	public int SicknessId
	{
		get
		{
			return this._SicknessId;
		}
		set
		{
			if ((this._SicknessId != value))
			{
				if (this._Sickness.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSicknessIdChanging(value);
				this.SendPropertyChanging();
				this._SicknessId = value;
				this.SendPropertyChanged("SicknessId");
				this.OnSicknessIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalRecordId", DbType="Int NOT NULL")]
	public int MedicalRecordId
	{
		get
		{
			return this._MedicalRecordId;
		}
		set
		{
			if ((this._MedicalRecordId != value))
			{
				if (this._MedicalRecord.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMedicalRecordIdChanging(value);
				this.SendPropertyChanging();
				this._MedicalRecordId = value;
				this.SendPropertyChanged("MedicalRecordId");
				this.OnMedicalRecordIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="TinyInt NOT NULL")]
	public byte Rate
	{
		get
		{
			return this._Rate;
		}
		set
		{
			if ((this._Rate != value))
			{
				this.OnRateChanging(value);
				this.SendPropertyChanging();
				this._Rate = value;
				this.SendPropertyChanged("Rate");
				this.OnRateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfReview", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfReview
	{
		get
		{
			return this._DateOfReview;
		}
		set
		{
			if ((this._DateOfReview != value))
			{
				this.OnDateOfReviewChanging(value);
				this.SendPropertyChanging();
				this._DateOfReview = value;
				this.SendPropertyChanged("DateOfReview");
				this.OnDateOfReviewChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalRecord_SicknessMedicalRecord", Storage="_MedicalRecord", ThisKey="MedicalRecordId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public MedicalRecord MedicalRecord
	{
		get
		{
			return this._MedicalRecord.Entity;
		}
		set
		{
			MedicalRecord previousValue = this._MedicalRecord.Entity;
			if (((previousValue != value) 
						|| (this._MedicalRecord.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MedicalRecord.Entity = null;
					previousValue.SicknessMedicalRecords.Remove(this);
				}
				this._MedicalRecord.Entity = value;
				if ((value != null))
				{
					value.SicknessMedicalRecords.Add(this);
					this._MedicalRecordId = value.Id;
				}
				else
				{
					this._MedicalRecordId = default(int);
				}
				this.SendPropertyChanged("MedicalRecord");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sickness_SicknessMedicalRecord", Storage="_Sickness", ThisKey="SicknessId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Sickness Sickness
	{
		get
		{
			return this._Sickness.Entity;
		}
		set
		{
			Sickness previousValue = this._Sickness.Entity;
			if (((previousValue != value) 
						|| (this._Sickness.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sickness.Entity = null;
					previousValue.SicknessMedicalRecords.Remove(this);
				}
				this._Sickness.Entity = value;
				if ((value != null))
				{
					value.SicknessMedicalRecords.Add(this);
					this._SicknessId = value.Id;
				}
				else
				{
					this._SicknessId = default(int);
				}
				this.SendPropertyChanged("Sickness");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _UserName;
	
	private string _LoweredUserName;
	
	private string _MobileAlias;
	
	private bool _IsAnonymous;
	
	private System.DateTime _LastActivityDate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
	
	public aspnet_User()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredUserName
	{
		get
		{
			return this._LoweredUserName;
		}
		set
		{
			if ((this._LoweredUserName != value))
			{
				this.OnLoweredUserNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredUserName = value;
				this.SendPropertyChanged("LoweredUserName");
				this.OnLoweredUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
	public string MobileAlias
	{
		get
		{
			return this._MobileAlias;
		}
		set
		{
			if ((this._MobileAlias != value))
			{
				this.OnMobileAliasChanging(value);
				this.SendPropertyChanging();
				this._MobileAlias = value;
				this.SendPropertyChanged("MobileAlias");
				this.OnMobileAliasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
	public bool IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastActivityDate
	{
		get
		{
			return this._LastActivityDate;
		}
		set
		{
			if ((this._LastActivityDate != value))
			{
				this.OnLastActivityDateChanging(value);
				this.SendPropertyChanging();
				this._LastActivityDate = value;
				this.SendPropertyChanged("LastActivityDate");
				this.OnLastActivityDateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalInfo")]
public partial class PersonalInfo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Phone;
	
	private string _Mobile;
	
	private string _FacebookURL;
	
	private string _TwitterURL;
	
	private string _Address;
	
	private string _Note;
	
	private string _Email;
	
	private string _BloodType;
	
	private string _Gender;
	
	private System.Nullable<System.DateTime> _DateOfBrith;
	
	private string _Image;
	
	private string _Fax;
	
	private string _BusinessPhone;
	
	private System.Nullable<System.Guid> _UserId;
	
	private EntitySet<Doctor> _Doctors;
	
	private EntitySet<Nurse> _Nurses;
	
	private EntitySet<Patient> _Patients;
	
	private EntitySet<Pharmacist> _Pharmacists;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnFacebookURLChanging(string value);
    partial void OnFacebookURLChanged();
    partial void OnTwitterURLChanging(string value);
    partial void OnTwitterURLChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBloodTypeChanging(string value);
    partial void OnBloodTypeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBrithChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBrithChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnBusinessPhoneChanging(string value);
    partial void OnBusinessPhoneChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    #endregion
	
	public PersonalInfo()
	{
		this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
		this._Nurses = new EntitySet<Nurse>(new Action<Nurse>(this.attach_Nurses), new Action<Nurse>(this.detach_Nurses));
		this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
		this._Pharmacists = new EntitySet<Pharmacist>(new Action<Pharmacist>(this.attach_Pharmacists), new Action<Pharmacist>(this.detach_Pharmacists));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(250)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(250)")]
	public string Mobile
	{
		get
		{
			return this._Mobile;
		}
		set
		{
			if ((this._Mobile != value))
			{
				this.OnMobileChanging(value);
				this.SendPropertyChanging();
				this._Mobile = value;
				this.SendPropertyChanged("Mobile");
				this.OnMobileChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookURL", DbType="NVarChar(250)")]
	public string FacebookURL
	{
		get
		{
			return this._FacebookURL;
		}
		set
		{
			if ((this._FacebookURL != value))
			{
				this.OnFacebookURLChanging(value);
				this.SendPropertyChanging();
				this._FacebookURL = value;
				this.SendPropertyChanged("FacebookURL");
				this.OnFacebookURLChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterURL", DbType="NVarChar(250)")]
	public string TwitterURL
	{
		get
		{
			return this._TwitterURL;
		}
		set
		{
			if ((this._TwitterURL != value))
			{
				this.OnTwitterURLChanging(value);
				this.SendPropertyChanging();
				this._TwitterURL = value;
				this.SendPropertyChanged("TwitterURL");
				this.OnTwitterURLChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType", DbType="NVarChar(50)")]
	public string BloodType
	{
		get
		{
			return this._BloodType;
		}
		set
		{
			if ((this._BloodType != value))
			{
				this.OnBloodTypeChanging(value);
				this.SendPropertyChanging();
				this._BloodType = value;
				this.SendPropertyChanged("BloodType");
				this.OnBloodTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50)")]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBrith", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfBrith
	{
		get
		{
			return this._DateOfBrith;
		}
		set
		{
			if ((this._DateOfBrith != value))
			{
				this.OnDateOfBrithChanging(value);
				this.SendPropertyChanging();
				this._DateOfBrith = value;
				this.SendPropertyChanged("DateOfBrith");
				this.OnDateOfBrithChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(250)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(250)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessPhone", DbType="NVarChar(250)")]
	public string BusinessPhone
	{
		get
		{
			return this._BusinessPhone;
		}
		set
		{
			if ((this._BusinessPhone != value))
			{
				this.OnBusinessPhoneChanging(value);
				this.SendPropertyChanging();
				this._BusinessPhone = value;
				this.SendPropertyChanged("BusinessPhone");
				this.OnBusinessPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Doctor", Storage="_Doctors", ThisKey="Id", OtherKey="PersonalInfoId")]
	public EntitySet<Doctor> Doctors
	{
		get
		{
			return this._Doctors;
		}
		set
		{
			this._Doctors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Nurse", Storage="_Nurses", ThisKey="Id", OtherKey="PersonalInfoId")]
	public EntitySet<Nurse> Nurses
	{
		get
		{
			return this._Nurses;
		}
		set
		{
			this._Nurses.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Patient", Storage="_Patients", ThisKey="Id", OtherKey="PersonalInfoId")]
	public EntitySet<Patient> Patients
	{
		get
		{
			return this._Patients;
		}
		set
		{
			this._Patients.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalInfo_Pharmacist", Storage="_Pharmacists", ThisKey="Id", OtherKey="PersonalInfoId")]
	public EntitySet<Pharmacist> Pharmacists
	{
		get
		{
			return this._Pharmacists;
		}
		set
		{
			this._Pharmacists.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Doctors(Doctor entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = this;
	}
	
	private void detach_Doctors(Doctor entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = null;
	}
	
	private void attach_Nurses(Nurse entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = this;
	}
	
	private void detach_Nurses(Nurse entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = null;
	}
	
	private void attach_Patients(Patient entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = this;
	}
	
	private void detach_Patients(Patient entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = null;
	}
	
	private void attach_Pharmacists(Pharmacist entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = this;
	}
	
	private void detach_Pharmacists(Pharmacist entity)
	{
		this.SendPropertyChanging();
		entity.PersonalInfo = null;
	}
}
#pragma warning restore 1591
